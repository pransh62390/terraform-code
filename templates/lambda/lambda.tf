module "lambda_function" {
  source                                                = "../..//modules/lambda/lambda_new"
  for_each                                              = var.LAMBDA_FUNCTION_LIST
  lambda_name                                           = "${var.SHORT_ENV}-${each.key}"
  lambda_assume_role_policy                             = each.value.LAMBDA_FUNCTION_ASSUME_ROLE_POLICY
  lambda_managed_policy_arn_list                        = each.value.LAMBDA_FUNCTION_MANAGED_POLICY_ARN_LIST
  lambda_tags                                           = local.common_tags
  lambda_bucket_name                                    = each.value.LAMBDA_FUNCTION_BUCKET_NAME
  lambda_handler                                        = each.value.LAMBDA_FUNCTION_HANDLER
  lambda_runtime                                        = each.value.LAMBDA_FUNCTION_RUNTIME
  lambda_architectures                                  = each.value.LAMBDA_FUNCTION_ARCHITECTURES
  lambda_description                                    = each.value.LAMBDA_FUNCTION_DESCRIPTION
  lambda_memory_size                                    = each.value.LAMBDA_FUNCTION_MEMORY_SIZE
  lambda_reserved_concurrent_executions                 = each.value.LAMBDA_FUNCTION_RESERVED_CONCURRENT_EXECUTIONS
  lambda_timeout                                        = each.value.LAMBDA_FUNCTION_TIMEOUT
  lambda_package_type                                   = each.value.LAMBDA_FUNCTION_PACKAGE_TYPE
  lambda_enable_vpc                                     = each.value.ENABLE_LAMBDA_FUNCTION_VPC
  subnet_ids                                            = each.value.SUBNET_IDS
  security_group_ids                                    = each.value.SECURITY_GROUP_IDS 
  lambda_env_variables                                  = each.value.LAMBDA_FUNCTION_ENV_VARIABLES
  lambda_dead_letter_target_arn                         = each.value.LAMBDA_FUNCTION_DEAD_LETTER_TARGET_ARN
  lambda_enable_trigger                                 = each.value.LAMBDA_FUNCTION_ENABLE_TRIGGER
  lambda_trigger_resource_type                          = each.value.LAMBDA_FUNCTION_TRIGGER_RESOURCE_TYPE
  lambda_trigger_batch_size                             = each.value.LAMBDA_FUNCTION_TRIGGER_BATCH_SIZE
  lambda_trigger_maximum_batching_window_in_seconds     = each.value.LAMBDA_FUNCTION_TRIGGER_MAXIMUM_BATCHING_WINDOW_IN_SECONDS
  lambda_trigger_function_response_types                = each.value.LAMBDA_FUNCTION_TRIGGER_FUNCTION_RESPONSE_TYPES 
  lambda_trigger_resource_name                          = each.value.LAMBDA_FUNCTION_TRIGGER_RESOURCE_NAME
  lambda_trigger_maximum_event_age_in_seconds           = each.value.LAMBDA_FUNCTION_TRIGGER_MAXIMUM_EVENT_AGE_IN_SECONDS
  lambda_trigger_maximum_retry_attempts                 = each.value.LAMBDA_FUNCTION_TRIGGER_MAXIMUM_RETRY_ATTEMPTS
  lambda_cloudwatch_log_group_skip_destroy              = each.value.LAMBDA_CLOUDWATCH_LOG_GROUP_SKIP_DESTROY
  lambda_cloudwatch_log_group_class                     = each.value.LAMBDA_cloudwatch_LOG_GROUP_CLASS
  lambda_cloudwatch_log_group_retention_in_days         = each.value.LAMBDA_cloudwatch_LOG_GROUP_RETENTION_IN_DAYS
  lambda_maximum_concurrency                            = each.value.LAMBDA_MAXIMUM_CONCURRENCY
  lambda_trigger_filter_criteria_list                   = each.value.LAMBDA_FUNCTION_TRIGGER_FILTER_CRITERIA_LIST
  optional_config                                       = each.value.LAMBDA_FUNCTION_TRIGGER_OPTIONAL_CONFIG
  destination_config                                    = each.value.LAMBDA_FUNCTION_TRIGGER_DESTINATION_CONFIG
  lambda_layers_arns                                    = each.value.LAMBDA_LAYERS_ARNS
  depends_on = [ module.sqs, module.lambda_layers]
}
